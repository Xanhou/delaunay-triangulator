{
  "name": "Delaunay Triangulator",
  "tagline": "A simple and lean Java implementation of an incremental 2D Delaunay triangulation algorithm.",
  "body": "## A 2D Delaunay Triangulation Library for Java\r\nA simple and lean Java implementation of an incremental 2D Delaunay triangulation algorithm.\r\n### Table of contents\r\n-   How to get\r\n-   How to use\r\n-   How to build\r\n-   API Documentation\r\n-   Dependencies\r\n-   Demo Application\r\n-   License\r\n-   History\r\n\r\n### How to get\r\nType the following command into your shell:\r\n```bash\r\ngit clone https://github.com/jdiemke/delaunay-triangulator.git\r\n```\r\nThis will create a copy of the repository in your current working directory.\r\n### How to use\r\nThe code below shows how to use the `DelaunayTriangulator` class in order to triangulate a given set of points:\r\n```java\r\ntry {\r\n    Vector<Vector2D> pointSet = loadPointSet(\"data/normal-formation.conf\");\r\n    \r\n    delaunayTriangulator = new DelaunayTriangulator(pointSet);\r\n    delaunayTriangulator.triangulate();\r\n    \r\n    Vector<Triangle2D> triangleSoup = delaunayTriangulator.getTriangles();\r\n    \r\n} catch (NotEnoughPointsException e) {\r\n}\r\n```\r\nThe constructor throws a `NotEnoughPointsException` if it is invoked with less than three points.\r\n### How to build\r\nThe Delaunay triangulator library uses Gradle as a build tool and makes use of its multi project build capabilities. Each subproject contains its own build file and can be build separately. Hence, you can build only the part you want. For example, if you just want to build the library, then it is sufficient to locate into the project's root directory and type the following command into your shell:\r\n```bash\r\ngradle library:build\r\n```\r\nThis will cause Gradle to build the `DelaunayTriangulator-1.0.3.jar` library artifact in `library/build/libs/`. If you just want to build the example, then type the following into your shell:\r\n```bash\r\ngradle example:build\r\n```\r\nThis causes Gradle to build the `example.zip` and `example.tar` distribution artifacts in `example/build/distributions/`. In case you want to build the whole multi project, then type:\r\n```bash\r\ngradle build\r\n```\r\n### API Documentation\r\nThe Delaunay triangulator API documentation can be found [here](http://jdiemke.github.io/delaunay-triangulator/javadoc). You can also build it yourself using the javadoc Gradle task by typing the following into your shell:\r\n```bash\r\ngradle library:javadoc\r\n```\r\nThis causes Gradle to build the javadoc API documentation artifacts in `library/build/docs/javadoc`.\r\n### Dependencies\r\nThe Delaunay triangulation library itself does not have any dependencies; however, the example subproject uses JOGL 2.3.2 for rendering a triangulated point set using OpenGL. See [http://jogamp.org/](http://jogamp.org/) for further details on JOGL.\r\n### Demo Application\r\nThe screenshot below shows the demo application from the example project. In order to create a Delaunay triangulation you have to add points to the canvas by pressing the left mouse button. You need at least 3 points for the triangulation to be created.\r\n\r\n![demo screenshot](https://raw.githubusercontent.com/jdiemke/delaunay-triangulator/master/images/example_application.png \"Demo Application\")\r\n### License\r\nThe Delaunay triangulation library is protected by the very permissive MIT license. This means you can do anything you want with the code with some minor restrictions related to attribution and liability (see the license below for more details). Nevertheless, it is prefered, but not necessary, that you share your enhancements concerning the project's source code.\r\n```\r\nThe MIT License (MIT)\r\n\r\nCopyright (c) 2015 Johannes Diemke\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\nSOFTWARE.\r\n```\r\n### History\r\n##### 2016-05-05 / Release 1.0.3\r\n-   Adjusted dependencies from JOGL 2.3.1 to JOGL 2.3.2\r\n-   Adjusted the example application to incorporate user interaction (adding points by clicking in the window)\r\n-   Changed coding style guides (all indentation should be done with 4 space characters from now on)\r\n-   The Delaunay triangulation library now uses the List interfaces in order to decouple client code from using a specific implementation for providing a list of 2d points \r\n\r\n##### 2015-11-22 / Release 1.0.2\r\n-   Added [project site](http://jdiemke.github.io/delaunay-triangulator) and [Javadoc](http://jdiemke.github.io/delaunay-triangulator/javadoc)\r\n\r\n##### 2015-09-19 / Release 1.0.1\r\n-   Added the MIT License to the project\r\n\r\n##### 2015-09-18 / Release 1.0.0\r\n-   Minor refactoring\r\n-   Created Gradle build files\r\n-   Initial commit to GitHub\r\n\r\n##### 2010-08-01 / Release 0.0.0\r\n-   Initial implementation of the Delaunay triangulation algorithm\r\n",
  "google": "",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}